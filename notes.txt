
Notes:
 - Global help at https://github.com/golang/go/wiki/Projects
 - "Json" Config Reading via http://github.com/DisposaBoy/JsonConfigReader (Json file with comments... like cgrates) more help at http://blog.golang.org/json-and-go, http://json.org, http://stackoverflow.com/questions/20339117/golang-json-tags/20339608, http://stackoverflow.com/questions/17301149/golang-xml-unmarshal-and-time-time-fields?rq=1 
 - Command Line argument parsing with https://golang.org/pkg/flag/
 - Sending e-mail help at https://github.com/golang/go/wiki/SendingMail
 - Exit code via https://golang.org/pkg/os
 - Working with time at https://golang.org/pkg/time/, specially ParseDuration(s string) (Duration, error)
 - Timers/Ticks help at https://mmcgrana.github.io/2012/09/go-by-example-timers-and-tickers.html
 - Regexp Help at https://gobyexample.com/regular-expressions & https://github.com/google/re2/wiki/Syntax
 - Type Asserting interface{} to map[string]string help at http://play.golang.org/p/ghaYeP3llx
 - Parse Duration help at https://golang.org/pkg/time/#ParseDuration
 - MySQL Database actions with https://github.com/Go-SQL-Driver/MySQL/ over https://golang.org/pkg/database/sql/ (more information at http://go-database-sql.org/)
 - Please see Unmarshaling better, it can simplify configuration import to structs
 - For system commands https://golang.org/pkg/os/exec/

Code Snippets:

 /*"chain_name": [
   {
     "action_name": "action_name", "contact_names": ["contact_name", "contact_name2"]
   }
   // etc...
 ]*/


 /*"test": "general_test",
 "test2": "general_test2",
 "testArr": ["general_testArr_1", "general_testArr_2"],
 "testArr2": {
   "testArrBuh": {
     "general_testArr2_testArrBuh_k": "general_testArr2_testArrBuh_v"
   }
 },
 "testArr3": {
   "testArr3_key": "testArr3_v"
 }*/


 "run_count": 1, // TODO > 0, if not we'll assume 1
 "sleep_period": "30m", // TODO > 1m, if not we'll assume 1 day
\

//if *version {
//
//	return
//}

// Don't forget "pid" file

// Parse config file
/*fi, err := os.Stat(cfgDir)
if err != nil {
  if strings.HasSuffix(err.Error(), "no such file or directory") {
    return cfg, nil
  }
  return nil, err
} else if !fi.IsDir() && cfgDir != utils.CONFIG_DIR { // If config dir defined, needs to exist, not checking for default
  return nil, fmt.Errorf("Path: %s not a directory.", cfgDir)
}
if fi.IsDir() {

err = filepath.Walk(cfgDir, func(path string, info os.FileInfo, err error) error {
      if !info.IsDir() {
        return nil
      }
      cfgFiles, err := filepath.Glob(filepath.Join(path, "*.json"))

*/

Cross Compile for CentOS5: sudo GOOS=linux GOARCH=386 GOPATH=/Users/andre/Dev/go go install


/*

CDR Fields (Elastix 2.3 / Asterisk 1.8):

fmt.Println(calldate,
  clid,
  src,
  dst,
  //dcontext,
  //channel,
  //dstchannel,
  //lastapp,
  //lastdata,
  duration,
  billsec,
  disposition,
  //amaflags,
  //accountcode,
  //uniqueid,
  //userfield

)*/
